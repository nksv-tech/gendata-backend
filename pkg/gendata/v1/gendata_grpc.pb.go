// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: gendata/v1/gendata.proto

package gendata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GenDataServiceClient is the client API for GenDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenDataServiceClient interface {
	Gen(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error)
	PredefinedSettings(ctx context.Context, in *PredefinedSettingsRequest, opts ...grpc.CallOption) (*PredefinedSettingsResponse, error)
}

type genDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenDataServiceClient(cc grpc.ClientConnInterface) GenDataServiceClient {
	return &genDataServiceClient{cc}
}

func (c *genDataServiceClient) Gen(ctx context.Context, in *GenRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/gendata.v1.GenDataService/Gen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genDataServiceClient) PredefinedSettings(ctx context.Context, in *PredefinedSettingsRequest, opts ...grpc.CallOption) (*PredefinedSettingsResponse, error) {
	out := new(PredefinedSettingsResponse)
	err := c.cc.Invoke(ctx, "/gendata.v1.GenDataService/PredefinedSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenDataServiceServer is the server API for GenDataService service.
// All implementations must embed UnimplementedGenDataServiceServer
// for forward compatibility
type GenDataServiceServer interface {
	Gen(context.Context, *GenRequest) (*GenResponse, error)
	PredefinedSettings(context.Context, *PredefinedSettingsRequest) (*PredefinedSettingsResponse, error)
	mustEmbedUnimplementedGenDataServiceServer()
}

// UnimplementedGenDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenDataServiceServer struct {
}

func (UnimplementedGenDataServiceServer) Gen(context.Context, *GenRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gen not implemented")
}
func (UnimplementedGenDataServiceServer) PredefinedSettings(context.Context, *PredefinedSettingsRequest) (*PredefinedSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredefinedSettings not implemented")
}
func (UnimplementedGenDataServiceServer) mustEmbedUnimplementedGenDataServiceServer() {}

// UnsafeGenDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenDataServiceServer will
// result in compilation errors.
type UnsafeGenDataServiceServer interface {
	mustEmbedUnimplementedGenDataServiceServer()
}

func RegisterGenDataServiceServer(s grpc.ServiceRegistrar, srv GenDataServiceServer) {
	s.RegisterService(&GenDataService_ServiceDesc, srv)
}

func _GenDataService_Gen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenDataServiceServer).Gen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gendata.v1.GenDataService/Gen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenDataServiceServer).Gen(ctx, req.(*GenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenDataService_PredefinedSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredefinedSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenDataServiceServer).PredefinedSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gendata.v1.GenDataService/PredefinedSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenDataServiceServer).PredefinedSettings(ctx, req.(*PredefinedSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenDataService_ServiceDesc is the grpc.ServiceDesc for GenDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gendata.v1.GenDataService",
	HandlerType: (*GenDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gen",
			Handler:    _GenDataService_Gen_Handler,
		},
		{
			MethodName: "PredefinedSettings",
			Handler:    _GenDataService_PredefinedSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gendata/v1/gendata.proto",
}
